59일차


- 스프링 프레임워크에서는 객체를 미리 등록해여 불러와서 사용한다(요청이 들어올 때마다 객체를 생성하면 메모리 관리나 처리기능에 문제가 생긴다)
- 객체 용도별로 연관성 있는 객체가 모여 있다.( 참조, 의존성 ) -> 중식을 하는데 거기에 필요한 도구가 다 있는 것 / 연관성에 맞게 중식, 일식에 따라 깔맞춤을 해둔것 (이걸 spring에서 미리 모아놔서 시작하는 것)
- 스프링에서 사용하기 위해서는 객체를 미리 등록해야 한다 (****)

1. <bean id="객체이름" class="패키지.클래스"/>

2. <bean id="객체이름" class="패키지.클래스">
	<property name="age" value="29">
   </bean>

3. <bean id="객체이름" class="패키지.클래스">	
	<property name="age" ref="m1">
   </bean>

4. <bean id="객체이름" class="패키지.클래스">
	<constructor-arg value="이지은"/>
	<constructor-arg value="29"/>
   </bean>

==================================

1. 클래스 객체이름 = new 클래스();

2. 클래스 객체이름 = new 클래스();
    객체이름.setAge(29);		// 상수

3. 클래스 객체이름 = new 클래스();
    객체이름.setMember(m1);	// 참조변수

4. 클래스 객체이름 = new 클래스("이지은",29);


==================================

<context:component-scan base package="com.itbank.test2"/>

// 지정한 패키지 내에 클래스 중에서 특정 어노테이션이 붙은 (**클래스***)를
// 객체로 생성하고 빈으로 등록해라
// 특정 어노테이션의 종류

@Controller	(Web)	: MVC에서 컨트롤러, 서블릿에게 요청을 넘겨받음 ( request, response )
@Service	(Java)	: 컨트롤러가 호출할 수 있는 함수를 모아서 가지는 객체, Model이나 Controller에 종속적이지 않은 코드를 작성(단독 실행할 수 있는거)
@Repository	(DB)	: 데이터의 저장소, 즉 DB에 접근하는 객체, 보통 DAO를 가리킨다
@Component		: 용도는 명확하지 않으나, 스프링 빈으로 등록하여 사용할 객체
@RestController		: 기존 컨트롤러의 기능에서 모든 메서드에 @ResponseBody가 자동으로 적용된다. AJAX용으로 사용
@ControllerAdvice 	: 지정한 범위에서 발생하는 모든 예외를 집중시켜 처리하는 클래스

[Handler Mapping] => 스프링 빈을 찾는것 : 어노테이션이 @Controller인 것을 스프링 빈이 된 것을 객체로 인식해서 찾아가는 것

@Autowired : 의존성을 자동으로 맞춰준다 컨트롤러안에 @Autowired가 있으면 그거의 bean이 있는지 찾아보고 있으면 자동으로 참조해주는 것이다.

=================================

프로젝트 생성하고 나서는 패키지 이름을 수정해도 된다

==================================

스피링 404 
1. 주소 맵핑 X
2. 클라이언트에 보내줄 .jsp가 없는 경우

=================================

405 -> 주소는 있는데 method가 없는 경우

================================

★ : 자주 사용하는 것
@Controller		★
@RequestMapping
@GetMapping		★	
@PostMapping		★
@RequestParam
@ModelAttribute
@PathVariable

매개변수 가능한 자료형
HttpServletRequest request 
requeset.setAttribute("name", name);

HttpSession
String
primitive
DTO			★
Model			★
ModelAndView

반환형 가능한 자료형

void / String ★ / ModelAndView

=================================

스프링에서 반복되는 작없을 공통으로 처리할 수 있느 3가지 요소

1. filter	인코딩
2. interceptor	로그인
3. aop		로깅

dispatcherselvet의 멤버 필드가 model이다. -> 값을 넣기 위해 참조변수를 가지는 것이다.

반환되는 문자열과 보내는 attribute를 같이 넘겨주는 것이 ModelAndView이다.

Dispacther서블릿이 @Controller 를 인식하는 것 



======================

2021-12-01

매개변수 == 파라미터


@Controller 	: 성동 -> 객체 생성을 하기 위한 어노테이션 / 서현 -> dispacherServlet이 보내는 곳
		  채현 -> DispacherServlet이 처음 인식해서 스프링 빈을 만들어 주는 어노테이션 서로 객체 참조

@RequestMapping(value="/ex01", method=Request.Method.GET) == ( @GetMapping("/ex01") ) : 어디로 갈지 알려주는 애 / 메서드 방식이 GET

@RequestMapping(value="/ex01", method=Request.Method.POST) == ( @PostMapping("/ex01") ) : POST방식으로 "/"로 요청 시 Post주소로 가서 해당 함수를 실행해서 "/ex01"로 보내주는 역할

-> jsp 파일에 있는 form post방식으로 web으로 보낸다 -> 입력창이 뜨면 입력창에 갑을 받는다 -> PostMapping으로 가서 입력받은 값으로 함수를 실행시킨다 -> return 값으로 해당주소로 가라고 했다 ->  해당주소로 갔는데 dto의 값이 존재하기 때문에 dto의 값을 출력할 수 있다.

@RequestParam == request.getParameter(입력받은 값)  :  생략해도 알아서 맵핑해준다. 

@ModelAttribute  : 파라미터를 그대로 model(장바구니)에 attribute(저장)시켜주는 역할

-> @ModelAttribute("name") String name  ==  model.addAttribute("name", name);

-> @ModelAttribute("name") 안에 name은 input에 name과 일치해야 model에 값을 저장할 수 있다.

-> ModelAttribute에서 지정하는 이름은 view에서 EL태그 참조할 이름이다

@PathVariable : 경로 변수 /  @GetMapping("/ex05/{name}") 여기서 @PathVariable String name 해서 입력받은 값을 {name}으로 들어가서 주소로 사용할 수 있다.

-> 입력받은 값을 주소에 추가 / 추가되는 위치 : {name}


<!--  인코딩 필터   -->
<filter>
	<filter-name>encodingFilter</filter-name>
	<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
	<init-param>
		<param-name>encoding</param-name>
		<param-value>utf-8</param-value>
	</init-param>
</filter>

<filter-mapping>
	<filter-name>encodingFilter</filter-name>
	<url-pattern>/*</url-pattern>
</filter-mapping>


<!-- 주소에 한글이 있는것을 관대하게 허용해준다  -->
<!-- https://mvnrepository.com/artifact/xerces/xercesImpl -->
<dependency>
	<groupId>xerces</groupId>
	<artifactId>xercesImpl</artifactId>
	<version>2.12.1</version>
</dependency>



@GetMapping("/ex04")
public void abcd() {}
// 함수이름은 반환형과 아무 상관이 없다

// 함수의 반환형은 viewName이고, view에게 객체를 전달하기 위해서 Model을 사용한다
// 둘 다 DispatcherServlet을 통해서 전달하므로, 두 요소를 하나로 묶어서 반환하도록 ModelAndView를 사용할 수 있다.
// ModelAndView = Model model + String viewName

-> 어디로 갈지, 무엇을 가지고 갈지 값을 넣을 수 있는 자료형

ModelAndView mav = new ModelAndView("calc");

//  주소가 바뀔일이 없으면 생성자 매개변수로 viewName을 전달해도 된다
// ModelAndView mav = new ModelAndView("ex04Result");		
	

// 주소가 변경될 때 기본생성자를 만들고 그 안에 값을 넣어서 변경해주는 역할

// 사용자 입력값에 따라서 달라진다면 setter를 이용해서 변환시켜줄 수 있다.
		
	ModelAndView mav = new ModelAndView();	// 기본 생성자로 객체를 생성하고
	mav.setViewName("ex04Result"); 		// viewName을  setter로 지정할 수 있다
		
	mav.addObject("dto", dto);		// view에게 전달할 attribute를 addObject(name, object)로 전달한다
