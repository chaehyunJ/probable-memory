JSP (Java Server Page) : 자바를 이용해서 웹 서버쪽에서 처리하는 것을 말함

지시자<%@page import %>
선언부<%! 멤버 필드 멤버 메서드 선언와 작성하는 곳%>
스크립틀릿<% 일반적인 자바코드 %>
표현식<%= 스크립틀릿에서 정의한 dto.getId()로 출력가능%>
주석 <%-- --%>


내장객체

request -> 클라이언트에서 웹 서버로 전달하는 요청을 객체화한 형태를 말한다

요청 내용 : URL, URI, ServerName, ServerPort

요청 방식 : GET, POST

요청에 포함되는 사용자 입력값 Parameter / Parameter형식은 String이다

response -> 서버에서 클라이언트로 응답을 보내는 것
사용자에게 보낼 응답을 만들어내는 객체


응답코드
200	OK (요청의 성공)
300	
301	이름이 바뀌거나, 경로가 바뀌어서 찾을 수 없다
400	클라이언트 에러	
401	인증 X
403	접근 권리 X
404	요청받은 리소스를 찾을 수 없다
405
415
500	서버문제(서버 내부 문제) -> JSP나 자바코드가 잘못된 것

요청받은 문서가 존재하면 해당 문서를 컴파일 -> HTML텍스트 파일 형태로 보내준다
(.jsp -> .java -> .class 로 해서 다시 컴파일 해서 HTML + jsp로 해서 클라쪽으로 보내준다)



JSP 내장 객체

out	문서에 문자열을 출력하기 위해 사용하는 내장객체
	<%= %> 으로 대체할 수 있다
	out 객체는 response에서 참조할 수 있다
	
	PrintWriter out = response.getWriter();

pageContext
	현재 문서에서 유효한 정보를 가지고 있다
	뿐만 아니라, attribute를 저장할 수 있는 최소 범위이며, 대부분 기본값이다
	JSP에서 다른 attribute 저장 가능한 객체에 접근하려면
	pageContext 에서부터 찾아갈 수 있다

session
	주로 로그인 정보를 저장하는데 많이 사용한다
	쿠키와 대비되는 개념이며, 특정 정보를 서버에 저장하기 위해 많이 활용된다
	서로 다른 페이지에서도 동일한 객체에 대해서 접근이 가능하다

application
	서버가 열러 있는 동안 유지되는 attribute 저장소 이면서
	동시에 서블릿 정보를 포함하고 있다


=============================================================

parameter(매개변수)
	사용자가 서버에게 전달하는 데이터
	문자열이 기본 타입이다
	사용자에 의해서 만들어지는 값이므로, setParameter()는 없다
	<jsp:useBean/> <jsp:setProperty/>로 객체화 할 수 있다

attribute
	서버에서 만들어내는 데이터
	Object가 기본 타입이다
	서버에서 만들어낼 수 있으며, 내장 객체에 저장할 수 있다
	스크립틀릿에서 참조하려면 형변환을 거쳐야 하지만
	EL Tag를 통해서 손쉽게 접근할 수 있다


============================================================
새 파일에 문제파일의 코드를 한줄 한줄 붙여넣기해서 어떤 문장이 문제가 되는지 찾아봤는데 결국

"<!-- ${ }  = ~~~~ --> " 라고 수업내용필기를 위해 주석 처리한 문장 속 

${ }가 문제였다. 


주석이 문제가 될거라곤 생각도 못했는데 삭제하니 오류가 해결되었다.

-> 500번 오류 발생함

============================================================


