48일차

회원데이터와 연계되는 데이터 외래키 


[Member]			[Board]
userid	['aaa','bbb']		idx
userpw				writer member.userid ( on board.writer = member.userid ) -> 외래키 제약조건 (테이블이 두개이상)
username			title
email				content
gender				...

- 회원가입				- 목록	(비회원 가능)
- 로그인				- 검색	(비회원 가능)
- 로그아웃				- 읽기	(비회원 가능)
- 정보확인				- 작성	(비회원 불가)
- 정보수정				- 수정	(비회원 불가)
- 탈퇴				- 삭제	(비회원 불가)


페이지를 나누는 기준

하나의 기능(글 작성)이 1개 혹은 2개의 흐름으로 진행가능하다면 합쳐서 작성할 수도 있다(GET/POST)

입력받는 페이지 / 처리하는 페이지(redirect)

[수정]

1. 글 번호를 기준으로 글 내용${ dao.select(idx)}을 불러와서 form으로 띄운다

2. 불러온 내용을 사용자가 수정하여 submit하면 서버로 넘긴다

-------

3. 넘어온 데이터를 dto에 담아서 dao ${ dao.insert(dto) }로 넘겨서 함수 호출

4. 함수호출의 결과에 따라 적절한 페이지로 redirect 한다


====================

create table board2 (
        idx                  	number                        default board_seq.nextval primary key,
        writer                	varchar2(500)		      not null,
        title            	varchar2(500)   	      not null,
        content                 varchar2(2000)        	      not null,
        writeDate   		date                          default sysdate,
        ipAddress        	varchar2(50)                  not null,
    
   	constraint board2_member_fk foreign key(writer) -- board2_member_fk 라는 이름의 제약조건을 writer 컬럼에 설정한다
   	references member(userid)                       -- member 테이블의 userid에 있는 값만 writer에 쓸수 있는 규칙
    	on delete set null                              -- 만약 부모키(계정)이 삭제되면 자식키(작성자)는 null로 처리한다(작성자가 없음)
);

insert into board2 
    (writer, title, content, ipAddress)
    values ('emperor', '외래키 테스트 1', '내용', '1.1.1.1');   -- member 테이블에 userid값중 emperor 가 없다

insert into board2 
    (writer, title, content, ipAddress)
    values ('yellow', '외래키 테스트 2', '내용', '2.2.2.2');    -- member 테이블에 userid값중 yellow가 있다

select * from member;

=======================

id : c##itbank25
pw : 5328

=======================


외래키가 참조할 수 있는 것은 외래키 or fk

=======================

221.164.9.222

ID : jobs202108
PW : itbank

========================

preparedstatement 는 statement 상속받아서 사용
(prepardstatement는 statement의 서브클래스 그래서 statement의 기능을 사용가능한 것)

========================

// 쿠키를 찾을 경로를 컨텍스트패스 경로로 변경해준다
// setPath는 해당 프로젝트안에서 쿠키의 방향을바꾸는거라서 나중을 생각하면 setDomain을 사용하는 것이 바람직
auto.setPath("/day13_board_2");
		
// 나중에 가면 setDomain을 사용하는게 편리하다	
// auto.setDomain(pattern);


=======================

https://nid.naver.com/nidlogin.login?url=http%3A%2F%2Fmail.naver.com%2F

내가 가고자하는 것을 파라미터로 전달하고 있다

=======================

코칭 종료후 2주간 온라인 첨삭 제공

가족기업들과 매칭

job.kgitbank.co.kr (잡사이트 활용하기)
- 취업지원담당에게 이력서하고 포폴을 보내서 매칭시켜줌
- 내부적으로 지원하는 것이 유리함

문자로 채용 건 안내 받기

수시로 무시로 잡매칭 및 지원
- 공통적 이력서를 받아서 이력서를 대신 넣어줌(그리고 넣었다고 나한테 연락이 온다)
- 따라 신청해야됨

수료후 6개월 까지 취업지원

02-3676-6555


=======================

http://localhost:8080/day13_board_2_my_paging/login/loginForm.jsp?url=http://localhost:8080/day13_board_2_my_paging/board/list.jsp

href 링크로 보내고자하는 곳에 지금 url을 
href="${ cpath }/board/list.jsp?url=${ pageContext.request.requestURL }
을 입력해서 <h4>요청 내용 : <%=request.getRequestURL() %></h4>

이런식으로 작성을 로그인 세션이 있는 상태에서 들어갈 수 있도록 해서 로그인 폼을 띄워주고 로그인인 되면
다시 작성페이지로 넘어 올 수 있도록 ${ pageContext.request.requestURL } 을 설정해서 해당 요청내용을 파라미터로 받도록한다
이제 로그인 화면으로 가서 로그인페이지에서 parameter로 url을 받아오면 해당 url을 기존 ${ cpath } 로 지정되어 있는 url을 덮어쓰고 
해당 url로 location.href해서 보내준다

=======================

<h4>보내는 사람 : <%=request.getRemoteAddr() %></h4>
<h4>받는 사람 : <%=request.getLocalAddr() %></h4>
<h4>요청 방식 : <%=request.getMethod() %></h4>
<h4>요청 내용 : <%=request.getRequestURL() %></h4>
<h4>자원 식별자 : <%=request.getRequestURI() %></h4>

=======================

http://localhost:8080/day13_board_2_my_paging/login/loginForm.jsp?url=http://localhost:8080/day13_board_2_my_paging/board/list3.jsp?p=1

=======================

<input name="writer" value="${login.username}" readonly>
-> readonly를 해서 input태그이지만 읽기만 가능하도록 만들어서 값을 입력할 수 없도록 합니다

=======================
select * from (
	select rownum num, b.* from (
		select * from board order by writedate desc
		) b
	)
where num between 1 and 10;

create view board_view
as
select * from (
    select b.* from (
        select * from board order by writedate desc
        ) b
    );
    
select * from board_view where num between 11 and 20;

drop view board_view;


create view board_view
as
select * from (
	select rownum num, b.* from (
		select * from board2 order by writedate desc
		) b
	);
    
select * from board_view where num between 11 and 20;
    

create table board2 (
    idx         number          default BOARD2_SEQ.nextval primary key,
    writer      varchar2(500)   not null,
    title       varchar2(500)   not null,
    content     varchar2(2000)  not null,
    writeDate   date            default sysdate,
    ipAddress   varchar2(50)    not null,
    
    constraint board2_member_fk foreign key(writer) -- board_member_fk 라는 이름의 제약조건을 writer컬럼에 설정한다
    references member(userid)                       -- member 테이블의 userid에 있는 값만 writer에 쓸수 있는 규칙
    on delete set null                              -- 만약 부모키(계정)이 삭제되면 자식키(작성자)는 null로 처리한다
);

insert into board2(writer, title, content, ipAddress) values('emperor', '외래키 테스트','내용','1.1.1.1');

select * from member;

insert into board2(writer, title, content, ipAddress) values ('bbb','외래키 테스트2', '내용', '2.2.2.2');

commit;

select * from board2;

desc member;

create sequence board2_seq
    start with 1
    MAXVALUE 999999999
    INCREMENT by 1
    nocache
    nocycle;
    
drop table board2;


select * from member where userid ='bbb' and userpw ='bbb';

update member set username= '이지금', email = 'sf@naver.com', gender='여성' where userid = 'bbb';