com.oreilly.servlet => cos-20.08.zip을 다운로드

=> 안에 lib 안에 cos.jar를  프로젝트 안에 WebContent 안에 web-inf안에 lib에 넣어준다


<form method="POST" enctype="multipart/form-data">
	<p><input type="file" name="uploadFile"></p>	
	<p><input type="submit" value="제출"></p>
</form>


<%
	if(request.getMethod().equals("POST")){
// 		File f = request.getFile("uploadFile");	// 내장 객체 request 에는 파일 추출 메서드가 없음
		String uploadFile = request.getParameter("uploadFile");
		System.out.println("uploadFile : " + uploadFile +"\n");
		
		
		String saveDirectory = "C:\\uploadFolder";
		File dir = new File(saveDirectory);		// 문자열을 기반으로 파일(디렉토리) 객체를 생성하고
		
		if(dir.exists() == false){				// 실제로 준재하는 요쇼인가 확인해서 없으면
			dir.mkdir();						// 디렉토리를 만들어라
		}
		
		
		int postSize = 10485760;	// 10MB :	1024 * 1024 * 10
		
		
		// Multipartrequest는 파일을 처리할 수 있는 형태의 request이며 생성자 매개변수에 값을 전달해야 한다
		MultipartRequest mprequest = new MultipartRequest(
				request, 		// 현재 전달받은 요청 객체
				saveDirectory,	// 만약 파일이 있다면 어디에 저장할 것인가
				postSize,		// 어느정도 크기의 파일을 허용할 것 인가
				"UTF-8"			// 파일 이름 인코딩 방식 지정
				);
	}

%>


<p><input type="file" name="uploadFile" accept="image/*" multiple></p>

-> 이렇게 accept="image/*"로 접근을 제한해서 img파일은 모두 업로드할 수 있도록 제약을 걸어둘 수 있다

-> multiple 하면 여러개가 들어간다

================

// DefaultFileRenamePolicy()를 통해서 정책을 세워서 해당  파일의 이름을 확인할 수 있다(동일한 게 있으면 뒤에 (1), (2) 이렇게 넣어줘서 동일한 파일을 구분할 수 있게 한다)

================

파일 업로드를 DB에 기록하기

1. 파일의 경로만 DB에 기록

- 경로만 저장하여 DB의 공간 낭비가 적다
- 구현하기 쉽다
- 파일 이름이 중복될 수 있으니, 업로드 당시 이름과 저장하는 이름을 별도로 저장한다
- 파일 이름 정책을 활용하여 (1), (2) 식으로 저장하거나, 업로드 날짜 및 시간을 기록하는 방법도 있다


public class SampleDTO{
	private int idx;
	private String writer, content, title;
	private Date writeDate;
	private String uploadFileName;
	private String storedFileName;

2. 파일을 통째로 DB에 저장

- BLOB(Binary Large Object) 형태로 저장
- 별도로 저장하는 위치가 없고 모두 DB에 저장한다
- DB에 저장된 파일을 다시 일반 파일형태로 변환해야 한다
- 파일이름이 중복되더라도 해당 row의 pk로 구분 가능
- 과도하게 사용하면 DB의 공간 및 속도가 저하된다

- vmware 하나 더 만들어서 httpd 돌리고 sftp 업로드해서 불러오는게 더 편하다

AWS 


EC2	(Web Server)	process
			
RDS	(DB Server)	database

S3	(Resource)	file storage

=========================

select * from reply;

select * from member;

drop sequence upload1_seq;
drop table upload1;

create sequence upload1_seq
    start with 1
    maxvalue 9999999999
    increment by 1
    nocache
    nocycle;
    
create table upload1 (
    idx             number          default upload1_seq.nextval primary key,
    memo            varchar2(500)   not null,
    uploadFileName  varchar2(500)   -- 게시글에서 파일을 첨부하지 않아도 글을 작성할 수 있어야 한다
);

select * from upload1;
commit;

=========================