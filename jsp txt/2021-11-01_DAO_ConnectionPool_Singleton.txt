기존 방식 : DAO 마다 1개의 커넥션을 보유하고 메서드 호출이 끝나면 연결이 끊어짐
-> 메서드 호출을 여러번 하려면 같은 클래스로 여러번 객체를 생성하는 불편함

ConnectionPool 도입 후 : 
DAO가 여러번 메서드를 호출해도 커넥션을 새로 받아서 사용할 수 있게 된다.
-> 서로 다른 페이지가 아니라면, DAO는 하나만 있어도 충분하다

<%@ include %> 를 활용하면 여러 페이지가 하나의 DAO를 참조할 수도 있다
- 소스 코드를 합친 이후에 컴파일이 되는 형식
- 실제 서버에서는 여러개의 DAO객체가 만들어지는 형태

DTO : 속성을 중심으로 처리하는 객체 -> 서로 다른 객체가 다른 값을 가지게 된다
DAO : 기능을 중심으로 처리하는 객체 -> 서버 메모리에 오로지 하나의 객체만 있어도 된다

싱글톤(Singleton) : 객체를 요청하면 어디서나 동일한 객체를 참조할 수 있도록 하는 디자인패턴

객체를 서로 다른 페이지에서 생성해도, 여러번 새로고침해도, 서로 다른 클라이언트에서 접근해도
오로지 하나의 객체만 참조하게 된다 (불필요한 메모리 낭비가 사라진다)