Git 사용방법

Git?
형상 관리 시스템 (Version Control System) 의 한 종류입니다.
주로 개발자들이 프로그램과 관련된 파일들을 저장하는 데 사용합니다.
게임의 세이브 포인트와 유사합니다. 언제든지 저장한 시점으로 되돌아 갈 수 있습니다.

commit
게임의 세이브에 해당하는 행동을 git에서는 커밋이라고 한다.
다시 말하면 언제든지 커밋한 시점으로 되돌아 갈 수 있다.
커밋을 하려면 저장을 원하는 파일을 묶어서 커밋 명령을 수행하면 된다.

add
앞에서 커밋하기 전에 저장을 원하는 파일들을 묶는 일을 해야한다.
이 작업을 스테이지에 파일을 올린다고 한다.
간단하게 add라고 한다

push
커밋을 하면 이제 현재 작업 내용의 세이브 데이터가 내 컴퓨터에 저장된다.
이걸 github에 업로드하면 마치 요즘 유행하는 스팀이나, 모바일 게임의 원격 저장과 비슷한 일을 한다.
다른 사람이랑 공유할 수도 있고, 내 컴퓨터의 데이터가 날악도 안전하게 다시 복구할 수 있다.

-> git에서 push를하면 github에 올라가서 다른사람들과 공유를 할 수 있게 된다


https://github.com/chaehyunJ/hello-world.git
https://github.com/chaehyunJ/hello-world.git
Source Tree 설치

우리는 조금 더 편하게 git을 사용하기 위해서 source tree를 설치하려고 합니다.
터미널 명령은 나중에

커밋 주의사항
1. 반드시 한 번에 하나의 논리적 작업만을 커밋한다.
2. 커밋 메시지를 잘 적어야 한다.

커밋 메시지 작성법
1. 첫 줄에 간단하지만 명확하게 내용을 씁니다.
2. 한 줄 비우고
3. 자세한 내용을 적는다.
(2,3은 옵션이지만 가급적이면 해 주는 게 좋습니다)


Git vs. GitHub

Git 
- 로컬에서 즉, 내가 보고 있는 컴퓨터에서 돌아가는 버전관리 프로그램이다.

GitHub
- 원격에서 즉, 다른 사람 컴퓨터에 이 버젼들을 저장해놓는 저장소이다.
- 원격에서 동작하는 소스코드 버전 저장소이다.

-> 버전 관리 툴과 저장소는 여러가지이다.


git config --global init.defaultBranch main
-> 최근에 깃허브에서 master라고 부르던 기본 브랜치를 main으로 명칭 변경을 함
-> 그것 때문에 오류가 생기는 경우가 있어서 그것을 미리 방지하는 명령어이다.
-> 설치하고 최초 1회만 실행하면 된다.

git을 설치하고 제일 먼저 해야하는 일
- 유저명과 유저 이메일을 정해주는 것이다
- git config라는 명령어를 통해서 할 수 있다.
- git config 뒤에 global이라는 명령어가 붙는 것은 
- 앞으로 이 컴퓨터에서 깃으로 관리하는 모든 프로젝트는 global하게 즉 모두다 이 유저네임으로 할거야 라는 뜻이 되게 됩니다

git config --global user.name "chaeHyunJ"
git config --global user.email "sfdoa987@naver.com"
git config --list

git 폴더 위치
C:\202108_스프링클라우드\Git

버전 관리를 사진찍기로 비유해 봅시다

-> 사진을 찍으려면 사진사가 필요합니다 / 
-> 그리고 사진을 찍으려면 사람들이 모여야 합니다 / 
-> 사람들이 모이면 사진을 찍고 그 찍은 순간이 사진으로 남는다
--> 이 과정이 깃 버전관리의 전부입니다.

1. 사진을 찍으려면 사진사를 고용해야 합니다 
(우리는 우리의 코드를 현재상태 사진을 찍어줄 사진사를 고용합니다)
(바로 git init 명령어를 통해서요)
(사진사의 고용은 최초 1회만 하면 되겠죠?)
(그래서 git init 은 한 프로젝트를 관리할 때 최초 1회만 하면 됩니다)

2. 이제 사진사를 고용했으니, 사진찍을 사람들이 모여야겠죠?
(바로 git add 명령어를 통해서 사진에 찍힐 코드파일들을 모아줍니다) 
(사람들이 모이는 것은 찍을때마다 사람들이 다를 수 있겠죠?)
(그래서 git add는 사진을 찍을때마다 해 주어야 합니다)

3. 이제 다 모였으니 사진을 찍으면 되겠죠??
(바로 git commit 명령어로 모인 코드들의 현재상태를 '찰칵'하고 찍게 됩니다)
(마지막으로 사진을 찍는 과정은 당연하게도 매번 해주어야합니다)
(마지막으로 찍은 사진을 확인할 수도 있어야겠죠?)
(우리가 찍은 사진들을 볼 수 있는 앨범같은 명령어가 있습니다)
(바로 git log입니다)


로컬에서의 형상관리 with 메모장 (init, add, commit, status, log, reset)
- 파일이름이나 폴더이름이 .으로 시작하면 숨김폴더나 숨김파일이라는 뜻
- 숨김파일 보기 옵션이 켜져있지 않으면 안보이니까 켜주기

git init 으로 .git 폴더를 만든다
그리고 해당 폴더에 test1.txt, test2.txt를 만들고 
git status를 입력해서 현재 파일의 상태를 확인한다

그리고 git add .라는 명령어를 실행 (. 은 전부를 말한다)

그리고 git status를 입력하면 파일들이 초록색으로 변경된 것을 확인할 수 있다

git commit -m "initial commit"
-> 사진을 찍을 껀데 사진의 이름은 initial commit이라는 명렁어입니다
-> initial commit은 보통 최초 커밋을 할 때 많이 쓰는 커밋메시지입니다.
-> -m 뒤의 따옴표 안에 들어가는 메시지는 본인이 알아보기 좋은 메시지로 하시면 됩니다

여기까지 했으면 사진이 잘 찍혔는지 확인을 해야합니다
git log 명령어를 통해서 확인을 해보겠습니다

그리고 파일을 수정하고 
다시 git add .을 해보겠습니다
그리고 git commit -m "modify one file"이라고 하고 
git log를 입력해서 확인합니다

자 그럼 최초 상태로 돌아가고 싶다면 어떻게 할까요?
바로 git reset --hard 커밋코드를 하시면 됩니다.
git reset --hard fff3e9c9c3bd4b686fe1beeea5d0baa0237ff274 이런식으로 입력한다

그럼 다시 modify one file로 돌아가는 건 어떻게 합니까??
-> 이건 github를 연동하면 가능해지는데 아직 github를 배우지 않았으니 나중에

마지막 커밋을 한뒤에 수정사항이 맘에 들지 않는다면 마지막 사진을 찍어둔 상태 즉 마지막 커밋으로 돌아갈 수 있죠

이제는 github라는 리모트 서버와 연동을 시켜서 프로젝트 관리를 해보겠습니다

우선, 깃허브는 로컬이 아니라 리모트 즉 다른 사람 컴퓨터입니다

그래서 회원가입을 해야합니다 

회원가입을 하고 push를 하면 잔디가 채워집니다

깃과 깃허브의 이메일과 유저네임이 서로 같아야 잔디가 심어집니다.


git remote add origin https://github.com/chaehyunJ/secondProject.git

-> 이 저장소를 내 git과 연동을 시키겠다

git push origin main 
-> 해당 프로젝트를 서버에 올리겠다


서버에서 변경이 발생했을 때는 어떻게 가져올 수 있을까?

-> git pull origin main

이전 commit을 돌아가기

git reset --hard (커밋해시코드)

프로젝트에서 올리고 싶지 않은 파일이 있다면 .gitignore -> 만들때 파일 이름을 .gitigore로 만들고 뒤에 확장자는 뺀다

그리고 안에 빼고 싶은 확장자명을 *.exe 이렇게 작성한다

그 다음 git staus로 확인

gitignore.io에 가면 맞춤 .gitignore 파일을 생성해준다

-------------

소스트리 사용하기

- 소스트리 설치하기
- 로컬에서 깃을 생성하고 소스트리에 넣어보기(변경, 커밋)
- 소스트리로 git reset --hard 해보기
- 로컬폴더를 원격 리포지토리와 연결하기(push)
- 로컬폴더를 지우고 클론해서 확인하기
- 클론한 폴더를 수정하고 커밋, 푸시하기
- 깃허브에서 Readme.md파일을 만들고 pull받아보기

-------------

동일한 레포지토리에 다른 커밋을 할 경우
-> git pull을 해서 자동으로 맞춰준다
-> git log로 확인

-------------

conflict !! 같은 파일을 수정해서 충돌이 났을 경우

-> 동일한 구간에 뭘 커밋할지 몰라서 생기는 오류이기 때문에 이럴 경우 사용자가 커밋할 내용을 지정해주고 
-> git add . -> git commit -m "conflict finish" 해주면 된다


--------------

branch의 이해
-> 따로 개발하고 나중에 하나로 합치자 

git init을 하고 최초 커밋을 하면 한개의 branch가 기본으로 생성되는데 그게 main이다
다른 사람은 new branch: a를 만들었다 이걸 나중에 합치는 것이 Merge이다
두개의 공간에서 개발된 코드를 하나의 브랜치로 합치는 것이다
이떄도 같은 파일의 같은 라인을 수정했다면 conflict 해결을 해줘야 한다

github에서 합쳐달라는 것으 PR (Pull Request)라고 부른다
PR을 수락하면 브랜치 두개가 합쳐지면서 merge가 된다


git branch 
-> 현재 생성되어있는 브랜치의 목록을 본다

git branch newBranch
-> newBranch라는 새로운 브랜치를 만든다

git checkout newBranch
-> newBranch라는 브랜치로 이동한다

git branch -D newBranch
-> newBranch라는 브랜치를 삭제한다

git push origin newBranch
-> 특정 브랜치를 깃허브에 푸시한다

-> github에 push가 되었으면 Compare & pull request나 Pull requests를 하면 된다
-> 메인에 새로 만든 branch를 넣는 것이다
-> Create pull request해준다
-> Merge pull requests 를 클릭한다 -> confirm을 해준다

-> 해당 레포지토리에 상대방을 추가하면 초대한 상대방이 허락을하면 merge가 되는 것이다.

-------------------

협업을 하는 방식 두번째, Fork

-> 남의 리포지토리를 그래돌 복제(Fork)해서 내 리포지토리에 넣는 것

--------------------

slack으로 github을 연동할 수 있다