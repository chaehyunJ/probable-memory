/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.72
 * Generated at: 2022-01-28 04:51:23 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class home_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1638935276929L));
    _jspx_dependants.put("jar:file:/D:/취업반-전채현/workspace-spring/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/test12/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fset_0026_005fvar;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fset_0026_005fvar = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fset_0026_005fvar.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      if (_jspx_meth_c_005fset_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<!--  구글 차트 라이브러리  -->\r\n");
      out.write("<script type=\"text/javascript\" src=\"https://www.gstatic.com/charts/loader.js\"></script>\r\n");
      out.write("\r\n");
      out.write("<h1>비NCS 데이터 시각화 평가 A형</h1>\r\n");
      out.write("<p>응시자 : 전채현</p>\r\n");
      out.write("<hr>\r\n");
      out.write("\r\n");
      out.write("<div class=\"root1\"></div>\r\n");
      out.write("<div class=\"root2\"></div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("	const cpath = '");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ cpath }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("'\r\n");
      out.write("	const root1 = document.querySelector('.root1')\r\n");
      out.write("	const root2 = document.querySelector('.root2')\r\n");
      out.write("	\r\n");
      out.write("	console.log(root1)\r\n");
      out.write("	console.log(root2)\r\n");
      out.write("	\r\n");
      out.write("	const url = cpath + '/covid'\r\n");
      out.write("	const opt = {\r\n");
      out.write("		method : 'get'\r\n");
      out.write("	}\r\n");
      out.write("	fetch(url, opt)\r\n");
      out.write("	.then(resp => resp.json())\r\n");
      out.write("	.then(json => {\r\n");
      out.write("		console.log(json)\r\n");
      out.write("		console.log(json.response.body.items.item)\r\n");
      out.write("\r\n");
      out.write("		const arr = json.response.body.items.item\r\n");
      out.write("		\r\n");
      out.write("		const result = arr.filter(arr => arr.gubun == '부산')\r\n");
      out.write("		\r\n");
      out.write("		const result1 = result.map(v => {\r\n");
      out.write("			return {\r\n");
      out.write("				localOccCnt : v.localOccCnt,\r\n");
      out.write("				stdDay : v.stdDay.substring(6,13).replace('월', '').replace('일', '')\r\n");
      out.write("			}\r\n");
      out.write("		})\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		console.log(\"check : \", result1)\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		google.charts.load('current', {packages : ['corechart']})\r\n");
      out.write("		google.charts.setOnLoadCallback(drawChart)\r\n");
      out.write("		\r\n");
      out.write("		function drawChart(){\r\n");
      out.write("			const ar1 = [] \r\n");
      out.write("			\r\n");
      out.write("			for(key in result1){\r\n");
      out.write("				let value = result1[key]\r\n");
      out.write("// 				console.log(\"incDec : \", value.incDec)\r\n");
      out.write("// 				console.log(\"stdDay : \", value.stdDay)\r\n");
      out.write("				const ar2 = []\r\n");
      out.write("				\r\n");
      out.write("				ar2.push(value.stdDay)\r\n");
      out.write("				ar2.push(value.localOccCnt)\r\n");
      out.write("				\r\n");
      out.write("				\r\n");
      out.write("				ar1.push(ar2)\r\n");
      out.write("			}\r\n");
      out.write("			ar1.reverse()\r\n");
      out.write("			\r\n");
      out.write("// 			for(let i = 0; i < result.length; i++){\r\n");
      out.write("// 				ar1.push(result[i])\r\n");
      out.write("// 			}\r\n");
      out.write("// 			ar1.sort(function(a,b){\r\n");
      out.write("// 				return a.stdDay < b.stdDay ? 1 : 0\r\n");
      out.write("// 			})\r\n");
      out.write("		// 테이블 생성\r\n");
      out.write("		const table = new google.visualization.DataTable()\r\n");
      out.write("			\r\n");
      out.write("		// column 추가\r\n");
      out.write("		table.addColumn('string', 'stdDay')\r\n");
      out.write("		table.addColumn('number','지역별 확진자 수')\r\n");
      out.write("		\r\n");
      out.write("		table.addRows(ar1)\r\n");
      out.write("		\r\n");
      out.write("		const opt1 = {\r\n");
      out.write("				title : '일자별 코로나 확진자',\r\n");
      out.write("				width : 1900,\r\n");
      out.write("				height : 450\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("		const chart = new google.visualization.ColumnChart(root2)\r\n");
      out.write("		chart.draw(table,opt1)\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("	})\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	const url2 = cpath + '/vaccine'\r\n");
      out.write("	const opt2 = {\r\n");
      out.write("		method : 'get'\r\n");
      out.write("	}\r\n");
      out.write("	fetch(url2, opt2)\r\n");
      out.write("	.then(resp => resp.json())\r\n");
      out.write("	.then(json => {\r\n");
      out.write("		console.log(json.data)\r\n");
      out.write("		\r\n");
      out.write("		const arr1 = json.data\r\n");
      out.write("		\r\n");
      out.write("		const result2 = arr1.map(v => {\r\n");
      out.write("			return {\r\n");
      out.write("				baseDate : v.baseDate.substring(5,11),\r\n");
      out.write("				totalFirstCnt : v.totalFirstCnt,\r\n");
      out.write("				totalSecondCnt : v.totalSecondCnt,\r\n");
      out.write("				totalThirdCnt : v.totalThirdCnt\r\n");
      out.write("			}\r\n");
      out.write("		})\r\n");
      out.write("		\r\n");
      out.write("		console.log(\"vaccine : \", result2)\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("		\r\n");
      out.write("		google.charts.load('current', {packages : ['corechart']})\r\n");
      out.write("		google.charts.setOnLoadCallback(drawChart)\r\n");
      out.write("		\r\n");
      out.write("		function drawChart(){\r\n");
      out.write("			const ar = []\r\n");
      out.write("			\r\n");
      out.write("			\r\n");
      out.write("			for(key in result2){\r\n");
      out.write("				let value = result2[key]\r\n");
      out.write("				const ar1 = []\r\n");
      out.write("				ar1.push(value.baseDate)\r\n");
      out.write("				ar1.push(value.totalFirstCnt)\r\n");
      out.write("				ar1.push(value.totalSecondCnt)\r\n");
      out.write("				ar1.push(value.totalThirdCnt)\r\n");
      out.write("				\r\n");
      out.write("				ar.push(ar1)\r\n");
      out.write("			}\r\n");
      out.write("			// 테이블 생성\r\n");
      out.write("			const table = new google.visualization.DataTable()\r\n");
      out.write("			\r\n");
      out.write("			// 컬럼 추가\r\n");
      out.write("			\r\n");
      out.write("			table.addColumn('string', 'baseDate')\r\n");
      out.write("			table.addColumn('number', '1차 접종 완료')\r\n");
      out.write("			table.addColumn('number', '2차 접종 완료')\r\n");
      out.write("			table.addColumn('number', '3차 접종 완료')\r\n");
      out.write("		\r\n");
      out.write("			\r\n");
      out.write("			table.addRows(ar)\r\n");
      out.write("			\r\n");
      out.write("			const opt2 = {\r\n");
      out.write("					title : '일자별 코로나 백신 접종',\r\n");
      out.write("					width : 1900,\r\n");
      out.write("					height : 450\r\n");
      out.write("			}\r\n");
      out.write("			const chart = new google.visualization.ColumnChart(root1)\r\n");
      out.write("			chart.draw(table,opt2)\r\n");
      out.write("			\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("\r\n");
      out.write("	})\r\n");
      out.write("	\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fset_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:set
    org.apache.taglibs.standard.tag.rt.core.SetTag _jspx_th_c_005fset_005f0 = (org.apache.taglibs.standard.tag.rt.core.SetTag) _005fjspx_005ftagPool_005fc_005fset_0026_005fvar.get(org.apache.taglibs.standard.tag.rt.core.SetTag.class);
    boolean _jspx_th_c_005fset_005f0_reused = false;
    try {
      _jspx_th_c_005fset_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fset_005f0.setParent(null);
      // /WEB-INF/views/home.jsp(4,0) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fset_005f0.setVar("cpath");
      int _jspx_eval_c_005fset_005f0 = _jspx_th_c_005fset_005f0.doStartTag();
      if (_jspx_eval_c_005fset_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        if (_jspx_eval_c_005fset_005f0 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
          out = org.apache.jasper.runtime.JspRuntimeLibrary.startBufferedBody(_jspx_page_context, _jspx_th_c_005fset_005f0);
        }
        do {
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ pageContext.request.contextPath }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          int evalDoAfterBody = _jspx_th_c_005fset_005f0.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
        if (_jspx_eval_c_005fset_005f0 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
          out = _jspx_page_context.popBody();
        }
      }
      if (_jspx_th_c_005fset_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fset_0026_005fvar.reuse(_jspx_th_c_005fset_005f0);
      _jspx_th_c_005fset_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fset_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fset_005f0_reused);
    }
    return false;
  }
}
